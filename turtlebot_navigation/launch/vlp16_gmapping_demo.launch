<launch>
 <!-- 3D sensor -->
  <arg name="3d_sensor" default="$(env TURTLEBOT_3D_SENSOR)"/>  <!-- r200, kinect, asus_xtion_pro -->
   
  <!-- vlp16 driver -->
  <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" />

  <!-- run pointcloud_to_laserscan node -->
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
      <remap from="cloud_in" to="$(arg 3d_sensor)_points"/>
      <remap from="scan" to="scan"/>
      <rosparam>
          target_frame: velodyne # Leave disabled to output scan in pointcloud frame
          transform_tolerance: 0.01
          min_height: 0.0
          max_height: 1.0

          angle_min: -3.141593 # -M_PI/2
          angle_max: 3.141592 # M_PI/2
          angle_increment: 0.0087 # M_PI/360.0
          scan_time: 0.3333
          range_min: 0.3
          range_max: 20.0
          use_inf: true

          # Concurrency level, affects number of pointclouds queued for processing and number of threads used
          # 0 : Detect number of cores
          # 1 : Single threaded
          # 2->inf : Parallelism level
          concurrency_level: 1
      </rosparam>

  </node>

  <node pkg="tf" type="static_transform_publisher" name="base_to_velodyne" args="0.0 0.0 0.18 0 0.0 0.0 /base_link /velodyne 50"/>


  <!-- Gmapping -->
  <arg name="custom_gmapping_launch_file" default="$(find turtlebot_navigation)/launch/includes/gmapping/vlp16_gmapping.launch.xml"/>
  <include file="$(arg custom_gmapping_launch_file)"/>

  <!-- Move base -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>
  <!-- 运行rviz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_rviz_launchers)/rviz/navigation.rviz"/>

</launch>
